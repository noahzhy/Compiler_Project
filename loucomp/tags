!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSIGN	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
AssignK	globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon3
AssignK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon13
BUFLEN	scan.c	23;"	d	file:
Boolean	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon5
Boolean	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon15
BucketList	symtab.c	/^   } * BucketList;$/;"	t	typeref:struct:BucketListRec	file:
BucketListRec	symtab.c	/^typedef struct BucketListRec$/;"	s	file:
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = $/;"	m
COMMA	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
ConstK	globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon4
ConstK	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon14
DADDR_SIZE	tm.c	22;"	d	file:
DONE	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
ELSE	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
END	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
ENDFILE	globals.h	/^   {ENDFILE,ERROR,$/;"	e	enum:__anon1
ENDFILE	yacc/globals.h	35;"	d
EOF_flag	scan.c	/^static int EOF_flag = FALSE; \/* corrects ungetNextChar behavior on EOF *\/$/;"	v	file:
EQ	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
ERROR	globals.h	/^   {ENDFILE,ERROR,$/;"	e	enum:__anon1
EchoSource	main.c	/^int EchoSource = TRUE;$/;"	v
Error	main.c	/^int Error = FALSE;$/;"	v
ExpK	globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	e	enum:__anon2
ExpK	yacc/globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	e	enum:__anon12
ExpKind	globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	t	typeref:enum:__anon4
ExpKind	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	t	typeref:enum:__anon14
ExpType	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	t	typeref:enum:__anon5
ExpType	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	t	typeref:enum:__anon15
FALSE	globals.h	18;"	d
FALSE	tm.c	17;"	d	file:
FALSE	yacc/globals.h	40;"	d
GT	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
GTEQ	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
IADDR_SIZE	tm.c	21;"	d	file:
ID	globals.h	/^    ID,NUM,$/;"	e	enum:__anon1
IF	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
INASSIGN	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INCOMMENT	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INCOMMENT_	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INDENT	util.c	114;"	d	file:
INEQ	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INGT	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INID	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INLT	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INNE	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INNUM	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INOVER	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
INSTRUCTION	tm.c	/^   } INSTRUCTION;$/;"	t	typeref:struct:__anon11	file:
INT	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
IdK	globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon4
IdK	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon14
IfK	globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon3
IfK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon13
Integer	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon5
Integer	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon15
LBRACE	globals.h	/^    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE$/;"	e	enum:__anon1
LBRACK	globals.h	/^    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE$/;"	e	enum:__anon1
LINESIZE	tm.c	26;"	d	file:
LPAREN	globals.h	/^    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE$/;"	e	enum:__anon1
LT	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
LTEQ	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
LineList	symtab.c	/^   } * LineList;$/;"	t	typeref:struct:LineListRec	file:
LineListRec	symtab.c	/^typedef struct LineListRec$/;"	s	file:
MAXCHILDREN	globals.h	61;"	d
MAXCHILDREN	yacc/globals.h	72;"	d
MAXRESERVED	globals.h	27;"	d
MAXRESERVED	yacc/globals.h	48;"	d
MAXTOKENLEN	scan.h	12;"	d
MINUS	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
NEQ	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
NO_ANALYZE	main.c	13;"	d	file:
NO_CODE	main.c	18;"	d	file:
NO_PARSE	main.c	11;"	d	file:
NO_REGS	tm.c	23;"	d	file:
NUM	globals.h	/^    ID,NUM,$/;"	e	enum:__anon1
NodeKind	globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	t	typeref:enum:__anon2
NodeKind	yacc/globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	t	typeref:enum:__anon12
OBJS	Makefile	/^OBJS = main.o util.o scan.o parse.o symtab.o analyze.o code.o cgen.o$/;"	m
OPCLASS	tm.c	/^   } OPCLASS;$/;"	t	typeref:enum:__anon8	file:
OPCODE	tm.c	/^   } OPCODE;$/;"	t	typeref:enum:__anon9	file:
OVER	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
OpK	globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon4
OpK	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon14
PC_REG	tm.c	24;"	d	file:
PLUS	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
RBRACE	globals.h	/^    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE$/;"	e	enum:__anon1
RBRACK	globals.h	/^    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE$/;"	e	enum:__anon1
READ	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
REPEAT	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
RETURN	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
RPAREN	globals.h	/^    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE$/;"	e	enum:__anon1
ReadK	globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon3
ReadK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon13
RepeatK	globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon3
RepeatK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon13
SEMI	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
SHIFT	symtab.c	21;"	d	file:
SIZE	symtab.c	17;"	d	file:
START	scan.c	/^   { START, INASSIGN, INEQ, INCOMMENT, INNUM, INID, DONE, INLT, INGT, INNE, INOVER, INCOMMENT_ }$/;"	e	enum:__anon18	file:
STEPRESULT	tm.c	/^   } STEPRESULT;$/;"	t	typeref:enum:__anon10	file:
StateType	scan.c	/^   StateType;$/;"	t	typeref:enum:__anon18	file:
StmtK	globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	e	enum:__anon2
StmtK	yacc/globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	e	enum:__anon12
StmtKind	globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	t	typeref:enum:__anon3
StmtKind	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	t	typeref:enum:__anon13
THEN	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
TIMES	globals.h	/^    PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NEQ, ASSIGN, SEMI, COMMA, $/;"	e	enum:__anon1
TRUE	globals.h	22;"	d
TRUE	tm.c	14;"	d	file:
TRUE	yacc/globals.h	44;"	d
TokenType	globals.h	/^   } TokenType;$/;"	t	typeref:enum:__anon1
TokenType	yacc/globals.h	/^typedef int TokenType; $/;"	t
TraceAnalyze	main.c	/^int TraceAnalyze = FALSE;$/;"	v
TraceCode	main.c	/^int TraceCode = FALSE;$/;"	v
TraceParse	main.c	/^int TraceParse = FALSE;$/;"	v
TraceScan	main.c	/^int TraceScan = TRUE;$/;"	v
TreeNode	globals.h	/^   } TreeNode;$/;"	t	typeref:struct:treeNode
TreeNode	yacc/globals.h	/^   } TreeNode;$/;"	t	typeref:struct:treeNode
UNINDENT	util.c	115;"	d	file:
UNTIL	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
VOID	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
Void	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon5
Void	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon15
WHILE	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
WORDSIZE	tm.c	27;"	d	file:
WRITE	globals.h	/^    ELSE, IF, INT, RETURN, VOID, WHILE, \/* DELETED  *\/ THEN, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
WriteK	globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon3
WriteK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon13
_ANALYZE_H_	analyze.h	9;"	d
_CGEN_H_	cgen.h	9;"	d
_CODE_H_	code.h	10;"	d
_GLOBALS_H_	globals.h	10;"	d
_GLOBALS_H_	yacc/globals.h	11;"	d
_PARSE_H_	parse.h	9;"	d
_SCAN_H_	scan.h	9;"	d
_SYMTAB_H_	symtab.h	10;"	d
_UTIL_H_	util.h	9;"	d
ac	code.h	27;"	d
ac1	code.h	30;"	d
assign_stmt	parse.c	/^TreeNode * assign_stmt(void)$/;"	f
assign_stmt	yacc/tiny.y	/^assign_stmt : ID { savedName = copyString(tokenString);$/;"	l
atEOL	tm.c	/^int atEOL(void)$/;"	f
attr	globals.h	/^             char * name; } attr;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon7
attr	yacc/globals.h	/^             char * name; } attr;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon17
bufsize	scan.c	/^static int bufsize = 0; \/* current size of buffer string *\/$/;"	v	file:
buildSymtab	analyze.c	/^void buildSymtab(TreeNode * syntaxTree)$/;"	f
cGen	cgen.c	/^static void cGen( TreeNode * tree)$/;"	f	file:
ch	tm.c	/^char ch  ;$/;"	v
checkNode	analyze.c	/^static void checkNode(TreeNode * t)$/;"	f	file:
child	globals.h	/^   { struct treeNode * child[MAXCHILDREN];$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode
child	yacc/globals.h	/^   { struct treeNode * child[MAXCHILDREN];$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode
code	main.c	/^FILE * code;$/;"	v
codeGen	cgen.c	/^void codeGen(TreeNode * syntaxTree, char * codefile)$/;"	f
copyString	util.c	/^char * copyString(char * s)$/;"	f
dMem	tm.c	/^int dMem [DADDR_SIZE];$/;"	v
dloc	tm.c	/^int dloc = 0 ;$/;"	v
doCommand	tm.c	/^int doCommand (void)$/;"	f
done	tm.c	/^int done  ;$/;"	v
emitBackup	code.c	/^void emitBackup( int loc)$/;"	f
emitComment	code.c	/^void emitComment( char * c )$/;"	f
emitLoc	code.c	/^static int emitLoc = 0 ;$/;"	v	file:
emitRM	code.c	/^void emitRM( char * op, int r, int d, int s, char *c)$/;"	f
emitRM_Abs	code.c	/^void emitRM_Abs( char *op, int r, int a, char * c)$/;"	f
emitRO	code.c	/^void emitRO( char *op, int r, int s, int t, char *c)$/;"	f
emitRestore	code.c	/^void emitRestore(void)$/;"	f
emitSkip	code.c	/^int emitSkip( int howMany)$/;"	f
error	tm.c	/^int error( char * msg, int lineNo, int instNo)$/;"	f
exp	globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon6
exp	parse.c	/^TreeNode * exp(void)$/;"	f
exp	yacc/globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon16
exp	yacc/tiny.y	/^exp         : simple_exp LT simple_exp $/;"	l
factor	parse.c	/^TreeNode * factor(void)$/;"	f
factor	yacc/tiny.y	/^factor      : LPAREN exp RPAREN$/;"	l
genExp	cgen.c	/^static void genExp( TreeNode * tree)$/;"	f	file:
genStmt	cgen.c	/^static void genStmt( TreeNode * tree)$/;"	f	file:
getCh	tm.c	/^void getCh (void)$/;"	f
getNextChar	scan.c	/^static int getNextChar(void)$/;"	f	file:
getNum	tm.c	/^int getNum (void)$/;"	f
getToken	scan.c	/^TokenType getToken(void)$/;"	f
getWord	tm.c	/^int getWord (void)$/;"	f
gp	code.h	24;"	d
hash	symtab.c	/^static int hash ( char * key )$/;"	f	file:
hashTable	symtab.c	/^static BucketList hashTable[SIZE];$/;"	v	file:
highEmitLoc	code.c	/^static int highEmitLoc = 0;$/;"	v	file:
iMem	tm.c	/^INSTRUCTION iMem [IADDR_SIZE];$/;"	v
iarg1	tm.c	/^      int iarg1  ;$/;"	m	struct:__anon11	file:
iarg2	tm.c	/^      int iarg2  ;$/;"	m	struct:__anon11	file:
iarg3	tm.c	/^      int iarg3  ;$/;"	m	struct:__anon11	file:
icountflag	tm.c	/^int icountflag = FALSE;$/;"	v
if_stmt	parse.c	/^TreeNode * if_stmt(void)$/;"	f
if_stmt	yacc/tiny.y	/^if_stmt     : IF exp THEN stmt_seq END$/;"	l
iloc	tm.c	/^int iloc = 0 ;$/;"	v
inCol	tm.c	/^int inCol  ;$/;"	v
in_Line	tm.c	/^char in_Line[LINESIZE] ;$/;"	v
indentno	util.c	/^static int indentno = 0;$/;"	v	file:
insertNode	analyze.c	/^static void insertNode( TreeNode * t)$/;"	f	file:
iop	tm.c	/^      int iop  ;$/;"	m	struct:__anon11	file:
kind	globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon6
kind	yacc/globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon16
lineBuf	scan.c	/^static char lineBuf[BUFLEN]; \/* holds the current line *\/$/;"	v	file:
lineLen	tm.c	/^int lineLen ;$/;"	v
lineno	globals.h	/^     int lineno;$/;"	m	struct:treeNode
lineno	main.c	/^int lineno = 0;$/;"	v
lineno	symtab.c	/^   { int lineno;$/;"	m	struct:LineListRec	file:
lineno	yacc/globals.h	/^     int lineno;$/;"	m	struct:treeNode
linepos	scan.c	/^static int linepos = 0; \/* current position in LineBuf *\/$/;"	v	file:
lines	symtab.c	/^     LineList lines;$/;"	m	struct:BucketListRec	file:
listing	main.c	/^FILE * listing;$/;"	v
location	analyze.c	/^static int location = 0;$/;"	v	file:
main	main.c	/^int main( int argc, char * argv[] )$/;"	f
main	tm.c	/^main( int argc, char * argv[] )$/;"	f
match	parse.c	/^static void match(TokenType expected)$/;"	f	file:
memloc	symtab.c	/^     int memloc ; \/* memory location for variable *\/$/;"	m	struct:BucketListRec	file:
mp	code.h	18;"	d
name	globals.h	/^             char * name; } attr;$/;"	m	union:treeNode::__anon7
name	symtab.c	/^   { char * name;$/;"	m	struct:BucketListRec	file:
name	yacc/globals.h	/^             char * name; } attr;$/;"	m	union:treeNode::__anon17
newExpNode	util.c	/^TreeNode * newExpNode(ExpKind kind)$/;"	f
newStmtNode	util.c	/^TreeNode * newStmtNode(StmtKind kind)$/;"	f
next	symtab.c	/^     struct BucketListRec * next;$/;"	m	struct:BucketListRec	typeref:struct:BucketListRec::BucketListRec	file:
next	symtab.c	/^     struct LineListRec * next;$/;"	m	struct:LineListRec	typeref:struct:LineListRec::LineListRec	file:
nodekind	globals.h	/^     NodeKind nodekind;$/;"	m	struct:treeNode
nodekind	yacc/globals.h	/^     NodeKind nodekind;$/;"	m	struct:treeNode
nonBlank	tm.c	/^int nonBlank (void)$/;"	f
nullProc	analyze.c	/^static void nullProc(TreeNode * t)$/;"	f	file:
num	tm.c	/^int num  ;$/;"	v
op	globals.h	/^     union { TokenType op;$/;"	m	union:treeNode::__anon7
op	yacc/globals.h	/^     union { TokenType op;$/;"	m	union:treeNode::__anon17
opADD	tm.c	/^   opADD,    \/* RR     reg(r) = reg(s)+reg(t) *\/$/;"	e	enum:__anon9	file:
opClass	tm.c	/^int opClass( int c )$/;"	f
opCodeTab	tm.c	/^char * opCodeTab[]$/;"	v
opDIV	tm.c	/^   opDIV,    \/* RR     reg(r) = reg(s)\/reg(t) *\/$/;"	e	enum:__anon9	file:
opHALT	tm.c	/^   opHALT,    \/* RR     halt, operands are ignored *\/$/;"	e	enum:__anon9	file:
opIN	tm.c	/^   opIN,      \/* RR     read into reg(r); s and t are ignored *\/$/;"	e	enum:__anon9	file:
opJEQ	tm.c	/^   opJEQ,     \/* RA     if reg(r)==0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon9	file:
opJGE	tm.c	/^   opJGE,     \/* RA     if reg(r)>=0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon9	file:
opJGT	tm.c	/^   opJGT,     \/* RA     if reg(r)>0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon9	file:
opJLE	tm.c	/^   opJLE,     \/* RA     if reg(r)<=0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon9	file:
opJLT	tm.c	/^   opJLT,     \/* RA     if reg(r)<0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon9	file:
opJNE	tm.c	/^   opJNE,     \/* RA     if reg(r)!=0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon9	file:
opLD	tm.c	/^   opLD,      \/* RM     reg(r) = mem(d+reg(s)) *\/$/;"	e	enum:__anon9	file:
opLDA	tm.c	/^   opLDA,     \/* RA     reg(r) = d+reg(s) *\/$/;"	e	enum:__anon9	file:
opLDC	tm.c	/^   opLDC,     \/* RA     reg(r) = d ; reg(s) is ignored *\/$/;"	e	enum:__anon9	file:
opMUL	tm.c	/^   opMUL,    \/* RR     reg(r) = reg(s)*reg(t) *\/$/;"	e	enum:__anon9	file:
opOUT	tm.c	/^   opOUT,     \/* RR     write from reg(r), s and t are ignored *\/$/;"	e	enum:__anon9	file:
opRALim	tm.c	/^   opRALim    \/* Limit of RA opcodes *\/$/;"	e	enum:__anon9	file:
opRMLim	tm.c	/^   opRMLim,   \/* Limit of RM opcodes *\/$/;"	e	enum:__anon9	file:
opRRLim	tm.c	/^   opRRLim,   \/* limit of RR opcodes *\/$/;"	e	enum:__anon9	file:
opST	tm.c	/^   opST,      \/* RM     mem(d+reg(s)) = reg(r) *\/$/;"	e	enum:__anon9	file:
opSUB	tm.c	/^   opSUB,    \/* RR     reg(r) = reg(s)-reg(t) *\/$/;"	e	enum:__anon9	file:
opclRA	tm.c	/^   opclRA      \/* reg r, int d+s *\/$/;"	e	enum:__anon8	file:
opclRM	tm.c	/^   opclRM,     \/* reg r, mem d+s *\/$/;"	e	enum:__anon8	file:
opclRR	tm.c	/^   opclRR,     \/* reg operands r,s,t *\/$/;"	e	enum:__anon8	file:
parse	parse.c	/^TreeNode * parse(void)$/;"	f
pc	code.h	13;"	d
pgm	tm.c	/^FILE *pgm  ;$/;"	v
pgmName	tm.c	/^char pgmName[20];$/;"	v
printSpaces	util.c	/^static void printSpaces(void)$/;"	f	file:
printSymTab	symtab.c	/^void printSymTab(FILE * listing)$/;"	f
printToken	util.c	/^void printToken( TokenType token, const char* tokenString )$/;"	f
printTree	util.c	/^void printTree( TreeNode * tree )$/;"	f
program	yacc/tiny.y	/^program     : stmt_seq$/;"	l
readInstructions	tm.c	/^int readInstructions (void)$/;"	f
read_stmt	parse.c	/^TreeNode * read_stmt(void)$/;"	f
read_stmt	yacc/tiny.y	/^read_stmt   : READ ID$/;"	l
reg	tm.c	/^int reg [NO_REGS];$/;"	v
repeat_stmt	parse.c	/^TreeNode * repeat_stmt(void)$/;"	f
repeat_stmt	yacc/tiny.y	/^repeat_stmt : REPEAT stmt_seq UNTIL exp$/;"	l
reservedLookup	scan.c	/^static TokenType reservedLookup (char * s)$/;"	f	file:
reservedWords	scan.c	/^    } reservedWords[MAXRESERVED]$/;"	v	typeref:struct:__anon19	file:
sibling	globals.h	/^     struct treeNode * sibling;$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode
sibling	yacc/globals.h	/^     struct treeNode * sibling;$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode
simple_exp	parse.c	/^TreeNode * simple_exp(void)$/;"	f
simple_exp	yacc/tiny.y	/^simple_exp  : simple_exp PLUS term $/;"	l
skipCh	tm.c	/^int skipCh ( char c  )$/;"	f
source	main.c	/^FILE * source;$/;"	v
srDMEM_ERR	tm.c	/^   srDMEM_ERR,$/;"	e	enum:__anon10	file:
srHALT	tm.c	/^   srHALT,$/;"	e	enum:__anon10	file:
srIMEM_ERR	tm.c	/^   srIMEM_ERR,$/;"	e	enum:__anon10	file:
srOKAY	tm.c	/^   srOKAY,$/;"	e	enum:__anon10	file:
srZERODIVIDE	tm.c	/^   srZERODIVIDE$/;"	e	enum:__anon10	file:
st_insert	symtab.c	/^void st_insert( char * name, int lineno, int loc )$/;"	f
st_lookup	symtab.c	/^int st_lookup ( char * name )$/;"	f
statement	parse.c	/^TreeNode * statement(void)$/;"	f
stepResultTab	tm.c	/^char * stepResultTab[]$/;"	v
stepTM	tm.c	/^STEPRESULT stepTM (void)$/;"	f
stmt	globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon6
stmt	yacc/globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon16
stmt	yacc/tiny.y	/^stmt        : if_stmt { $$ = $1; }$/;"	l
stmt_seq	yacc/tiny.y	/^stmt_seq    : stmt_seq SEMI stmt$/;"	l
stmt_sequence	parse.c	/^TreeNode * stmt_sequence(void)$/;"	f
str	scan.c	/^    { char* str;$/;"	m	struct:__anon19	file:
syntaxError	parse.c	/^static void syntaxError(char * message)$/;"	f	file:
term	parse.c	/^TreeNode * term(void)$/;"	f
term	yacc/tiny.y	/^term        : term TIMES factor $/;"	l
tmpOffset	cgen.c	/^static int tmpOffset = 0;$/;"	v	file:
tok	scan.c	/^      TokenType tok;$/;"	m	struct:__anon19	file:
token	parse.c	/^static TokenType token; \/* holds current token *\/$/;"	v	file:
tokenString	scan.c	/^char tokenString[MAXTOKENLEN+1];$/;"	v
traceflag	tm.c	/^int traceflag = FALSE;$/;"	v
traverse	analyze.c	/^static void traverse( TreeNode * t,$/;"	f	file:
treeNode	globals.h	/^typedef struct treeNode$/;"	s
treeNode	yacc/globals.h	/^typedef struct treeNode$/;"	s
type	globals.h	/^     ExpType type; \/* for type checking of exps *\/$/;"	m	struct:treeNode
type	yacc/globals.h	/^     ExpType type; \/* for type checking of exps *\/$/;"	m	struct:treeNode
typeCheck	analyze.c	/^void typeCheck(TreeNode * syntaxTree)$/;"	f
typeError	analyze.c	/^static void typeError(TreeNode * t, char * message)$/;"	f	file:
ungetNextChar	scan.c	/^static void ungetNextChar(void)$/;"	f	file:
val	globals.h	/^             int val;$/;"	m	union:treeNode::__anon7
val	yacc/globals.h	/^             int val;$/;"	m	union:treeNode::__anon17
word	tm.c	/^char word[WORDSIZE] ;$/;"	v
writeInstruction	tm.c	/^void writeInstruction ( int loc )$/;"	f
write_stmt	parse.c	/^TreeNode * write_stmt(void)$/;"	f
write_stmt	yacc/tiny.y	/^write_stmt  : WRITE exp$/;"	l
